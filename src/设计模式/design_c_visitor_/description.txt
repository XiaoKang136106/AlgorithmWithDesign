Visitor 访问者模式定义
			作用于某个对象群中各个对象的操作. 它可以使你在不改变这些对象本身的情况下,定义
			作用于这些对象的新操作.
			在 Java 中,Visitor 模式实际上是分离了 collection 结构中的元素和对这些元素进行
			操作的行为.(可以查找出集合中的元素属于哪个类或者数据类型)
			
				  表示一个作用于某对象结构中的各元素的操作。
			    它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。
			 适用性
			
			    1.一个对象结构包含很多类对象，它们有不同的接口，而你想对这些对象实施一些依赖于其具体类的操作。
			
			    2.需要对一个对象结构中的对象进行很多不同的并且不相关的操作，当你想避免让这些操作“污染”这些对象的类。
			      Visitor使得你可以将相关的操作集中起来定义在一个类中。
			      当该对象结构被很多应用共享时，用Visitor模式让每个应用仅包含需要用到的操作。
			
			    3.定义对象结构的类很少改变，但经常需要在此结构上定义新的操作。
			      改变对象结构类需要重定义对所有访问者的接口，这可能需要很大的代价。
			      
			      
			      为何使用 Visitor?
					Java 的 Collection(包括 Vector 和 Hashtable)是我们最经常使用的技术,可是
					Collection 好象是个黑色大染缸,本来有各种鲜明类型特征的对象一旦放入后,再取出时,
					这些类型就消失了.那么我们势必要用 If 来判断,如:
					Iterator iterator = collection.iterator()
					while (iterator.hasNext()) {
					Object o = iterator.next();
					if (o instanceof Collection)
					messyPrintCollection((Collection)o);
					else if (o instanceof String)
					System.out.println("'"+o.toString()+"'");
					else if (o instanceof Float)
					System.out.println(o.toString()+"f");
					else
					System.out.println(o.toString());
					}
					在上例中,我们使用了 instanceof 来判断 o 的类型.
					很显然,这样做的缺点代码 If else if 很繁琐.我们就可以使用 Visitor 模式解决它.