		Command(命令模式):
		
		将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化。
		
		将来自客户端的请求传入一个对象，无需了解这个请求激活的 动作或有关接受这个请求
		的处理细节。
		
		这是一种两台机器之间通讯联系性质的模式，类似传统过程语 言的 CallBack 功能。
		优点：
		解耦了发送者和接受者之间联系。 发送者调用一个操作，接受者接受请求执行相应的动作，
		因为使用 Command 模式解耦，发送者无需知道接受者任何接口。
		不少 Command 模式的代码都是针对图形界面的,它实际就是菜单命令,我们在一个下拉菜
		单选择一个命令时,然后会执行一些动作.
		将这些命令封装成在一个类中,然后用户(调用者)再对这个类进行操作,这就是 Command
		模式,换句话说,本来用户(调用者)是直接调用这些命令的,如菜单上打开文档(调用者),
		就直接指向打开文档的代码,使用 Command 模式,就是在这两者之间增加一个中间者,将这
		种直接关系拗断,同时两者之间都隔离,基本没有关系了.
		显然这样做的好处是符合封装的特性,降低耦合度,Command 是将对行为进行封装的典型模
		式,Factory 是将创建进行封装的模式,
		从 Command 模式,我也发现设计模式一个"通病":好像喜欢将简单的问题复杂化, 喜欢在
		不同类中增加第三者,当然这样做有利于代码的健壮性 可维护性 还有复用性.
		如何使用?
		具体的 Command 模式代码各式各样,因为如何封装命令,不同系统,有不同的做法.下面事例是将命令封装在一个 Collection 的 List 中,任何对象一旦加入 List 中,实际上装入
		了一个封闭的黑盒中,对象的特性消失了,只有取出时,才有可能模糊的分辨出: