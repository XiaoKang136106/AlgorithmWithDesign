装饰模式:Decorator
动态给一个对象添加一些额外的职责,相比用生成子类方式达到功能的扩充显得更为灵活.
		 
		Decorator 定义:
		,就象在墙上刷油漆.
		为什么使用 Decorator?
		我们通常可以使用继承来实现功能的拓展,如果这些需要拓展的功能的种类很繁多,那么势
		必生成很多子类,增加系统的复杂性,同时,使用继承实现功能拓展,我们必须可预见这些拓
		展功能,这些功能是编译时就确定了,是静态的.
		使用 Decorator 的理由是:这些功能需要由用户动态决定加入的方式和时机.Decorator
		提供了"即插即用"的方法,在运行期间决定何时增加何种功能.
		
		
		如何使用?
		举 Adapter 中的打桩示例,在 Adapter 中有两种类:方形桩 圆形桩,Adapter 模式展示
		如何综合使用这两个类,在 Decorator 模式中,我们是要在打桩时增加一些额外功能,比如,
		挖坑 在桩上钉木板等,不关心如何使用两个不相关的类.
		
		
		适用性

    	1.在不影响其他*象的情况下，以动态、透明的方式给单个对象添加职责。

   	 2.处理那些可以撤消的职责。

 	   3.当不能采用生成子类的方法进行扩充时。
			
 	参与者

	  	  1.Component
	   		   定义一个对象接口，可以给这些对象动态地添加职责。
	
	   	  2.ConcreteComponent
		    	  定义一个对象，可以给这个对象添加一些职责。
	
	  	  3.Decorator
	  	    维持一个指向Component对象的指针，并定义一个与Component接口一致的接口。
		
	   	  4.ConcreteDecorator
	    	  向组件添加职责。